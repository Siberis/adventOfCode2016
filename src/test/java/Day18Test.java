import org.junit.Assert;
import org.junit.Test;

/**
 * Created by siberis on 12/21/2016.
 */
public class Day18Test {

    @Test
    public void test1() {
        Day18 d = new Day18();
        String output = "..^^.\n" +
                ".^^^^\n" +
                "^^..^";
        Assert.assertEquals(output, d.generateMap("..^^.", 3));
    }

    @Test
    public void test2() {
        Day18 d = new Day18();
        String output = ".^^.^.^^^^\n" +
                "^^^...^..^\n" +
                "^.^^.^.^^.\n" +
                "..^^...^^^\n" +
                ".^^^^.^^.^\n" +
                "^^..^.^^..\n" +
                "^^^^..^^^.\n" +
                "^..^^^^.^^\n" +
                ".^^^..^.^^\n" +
                "^^.^^^..^^";
        Assert.assertEquals(output, d.generateMap(".^^.^.^^^^", 10));
        Assert.assertEquals(38, d.generateMap(".^^.^.^^^^", 10).chars().filter(i -> i == '.').count());
    }

    @Test
    public void FinalA() {
        Day18 d = new Day18();
        String output = "^.^^^..^^...^.^..^^^^^.....^...^^^..^^^^.^^.^^^^^^^^.^^.^^^^...^^...^^^^.^.^..^^..^..^.^^.^.^.......\n" +
                "..^.^^^^^^.^...^^^...^^...^.^.^^.^^^^..^.^^.^......^.^^.^..^^.^^^^.^^..^....^^^^^^.^^..^^....^......\n" +
                ".^..^....^..^.^^.^^.^^^^.^....^^.^..^^^..^^..^....^..^^..^^^^.^..^.^^^^.^..^^....^.^^^^^^^..^.^.....\n" +
                "^.^^.^..^.^^..^^.^^.^..^..^..^^^..^^^.^^^^^^^.^..^.^^^^^^^..^..^^..^..^..^^^^^..^..^.....^^^...^....\n" +
                "..^^..^^..^^^^^^.^^..^^.^^.^^^.^^^^.^.^.....^..^^..^.....^^^.^^^^^^.^^.^^^...^^^.^^.^...^^.^^.^.^...\n" +
                ".^^^^^^^^^^....^.^^^^^^.^^.^.^.^..^....^...^.^^^^^^.^...^^.^.^....^.^^.^.^^.^^.^.^^..^.^^^.^^....^..\n" +
                "^^........^^..^..^....^.^^......^^.^..^.^.^..^....^..^.^^^....^..^..^^...^^.^^...^^^^..^.^.^^^..^.^.\n" +
                "^^^......^^^^^.^^.^..^..^^^....^^^..^^.....^^.^..^.^^..^.^^..^.^^.^^^^^.^^^.^^^.^^..^^^....^.^^^...^\n" +
                "^.^^....^^...^.^^..^^.^^^.^^..^^.^^^^^^...^^^..^^..^^^^..^^^^..^^.^...^.^.^.^.^.^^^^^.^^..^..^.^^.^.\n" +
                "..^^^..^^^^.^..^^^^^^.^.^.^^^^^^.^....^^.^^.^^^^^^^^..^^^^..^^^^^..^.^..........^...^.^^^^.^^..^^..^\n" +
                ".^^.^^^^..^..^^^....^.....^....^..^..^^^.^^.^......^^^^..^^^^...^^^...^........^.^.^..^..^.^^^^^^^^.\n" +
                "^^^.^..^^^.^^^.^^..^.^...^.^..^.^^.^^^.^.^^..^....^^..^^^^..^^.^^.^^.^.^......^.....^^.^^..^......^^\n" +
                "^.^..^^^.^.^.^.^^^^...^.^...^^..^^.^.^...^^^^.^..^^^^^^..^^^^^.^^.^^....^....^.^...^^^.^^^^.^....^^^\n" +
                "...^^^.^.......^..^^.^...^.^^^^^^^....^.^^..^..^^^....^^^^...^.^^.^^^..^.^..^...^.^^.^.^..^..^..^^.^\n" +
                "..^^.^..^.....^.^^^^..^.^..^.....^^..^..^^^^.^^^.^^..^^..^^.^..^^.^.^^^...^^.^.^..^^....^^.^^.^^^^..\n" +
                ".^^^..^^.^...^..^..^^^...^^.^...^^^^^.^^^..^.^.^.^^^^^^^^^^..^^^^...^.^^.^^^....^^^^^..^^^.^^.^..^^.\n" +
                "^^.^^^^^..^.^.^^.^^^.^^.^^^..^.^^...^.^.^^^......^........^^^^..^^.^..^^.^.^^..^^...^^^^.^.^^..^^^^^\n" +
                "^^.^...^^^....^^.^.^.^^.^.^^^..^^^.^....^.^^....^.^......^^..^^^^^..^^^^...^^^^^^^.^^..^...^^^^^...^\n" +
                "^^..^.^^.^^..^^^.....^^...^.^^^^.^..^..^..^^^..^...^....^^^^^^...^^^^..^^.^^.....^.^^^^.^.^^...^^.^.\n" +
                "^^^^..^^.^^^^^.^^...^^^^.^..^..^..^^.^^.^^^.^^^.^.^.^..^^....^^.^^..^^^^^.^^^...^..^..^...^^^.^^^..^\n" +
                "^..^^^^^.^...^.^^^.^^..^..^^.^^.^^^^.^^.^.^.^.^......^^^^^..^^^.^^^^^...^.^.^^.^.^^.^^.^.^^.^.^.^^^.\n" +
                ".^^^...^..^.^..^.^.^^^^.^^^^.^^.^..^.^^........^....^^...^^^^.^.^...^^.^....^^...^^.^^...^^.....^.^^\n" +
                "^^.^^.^.^^...^^....^..^.^..^.^^..^^..^^^......^.^..^^^^.^^..^....^.^^^..^..^^^^.^^^.^^^.^^^^...^..^^\n" +
                "^^.^^...^^^.^^^^..^.^^...^^..^^^^^^^^^.^^....^...^^^..^.^^^^.^..^..^.^^^.^^^..^.^.^.^.^.^..^^.^.^^^^\n" +
                "^^.^^^.^^.^.^..^^^..^^^.^^^^^^.......^.^^^..^.^.^^.^^^..^..^..^^.^^..^.^.^.^^^...........^^^^...^..^\n" +
                "^^.^.^.^^....^^^.^^^^.^.^....^^.....^..^.^^^....^^.^.^^^.^^.^^^^.^^^^......^.^^.........^^..^^.^.^^.\n" +
                "^^.....^^^..^^.^.^..^....^..^^^^...^.^^..^.^^..^^^...^.^.^^.^..^.^..^^....^..^^^.......^^^^^^^...^^^\n" +
                "^^^...^^.^^^^^....^^.^..^.^^^..^^.^..^^^^..^^^^^.^^.^....^^..^^...^^^^^..^.^^^.^^.....^^.....^^.^^.^\n" +
                "^.^^.^^^.^...^^..^^^..^^..^.^^^^^..^^^..^^^^...^.^^..^..^^^^^^^^.^^...^^^..^.^.^^^...^^^^...^^^.^^..\n" +
                "..^^.^.^..^.^^^^^^.^^^^^^^..^...^^^^.^^^^..^^.^..^^^^.^^^......^.^^^.^^.^^^....^.^^.^^..^^.^^.^.^^^.\n" +
                ".^^^....^^..^....^.^.....^^^.^.^^..^.^..^^^^^..^^^..^.^.^^....^..^.^.^^.^.^^..^..^^.^^^^^^.^^...^.^^\n" +
                "^^.^^..^^^^^.^..^...^...^^.^...^^^^...^^^...^^^^.^^^....^^^..^.^^....^^...^^^^.^^^^.^....^.^^^.^..^^\n" +
                "^^.^^^^^...^..^^.^.^.^.^^^..^.^^..^^.^^.^^.^^..^.^.^^..^^.^^^..^^^..^^^^.^^..^.^..^..^..^..^.^..^^^^\n" +
                "^^.^...^^.^.^^^^.......^.^^^..^^^^^^.^^.^^.^^^^....^^^^^^.^.^^^^.^^^^..^.^^^^...^^.^^.^^.^^...^^^..^\n" +
                "^^..^.^^^...^..^^.....^..^.^^^^....^.^^.^^.^..^^..^^....^...^..^.^..^^^..^..^^.^^^.^^.^^.^^^.^^.^^^.\n" +
                "^^^^..^.^^.^.^^^^^...^.^^..^..^^..^..^^.^^..^^^^^^^^^..^.^.^.^^...^^^.^^^.^^^^.^.^.^^.^^.^.^.^^.^.^^\n" +
                "^..^^^..^^...^...^^.^..^^^^.^^^^^^.^^^^.^^^^^.......^^^......^^^.^^.^.^.^.^..^.....^^.^^.....^^...^^\n" +
                ".^^^.^^^^^^.^.^.^^^..^^^..^.^....^.^..^.^...^^.....^^.^^....^^.^.^^........^^.^...^^^.^^^...^^^^.^^^\n" +
                "^^.^.^....^.....^.^^^^.^^^...^..^...^^...^.^^^^...^^^.^^^..^^^...^^^......^^^..^.^^.^.^.^^.^^..^.^.^\n" +
                "^^....^..^.^...^..^..^.^.^^.^.^^.^.^^^^.^..^..^^.^^.^.^.^^^^.^^.^^.^^....^^.^^^..^^.....^^.^^^^.....";
        Assert.assertEquals(output, d.generateMap("^.^^^..^^...^.^..^^^^^.....^...^^^..^^^^.^^.^^^^^^^^.^^.^^^^...^^...^^^^.^.^..^^..^..^.^^.^.^.......", 40));
        Assert.assertEquals(1913, d.generateMap("^.^^^..^^...^.^..^^^^^.....^...^^^..^^^^.^^.^^^^^^^^.^^.^^^^...^^...^^^^.^.^..^^..^..^.^^.^.^.......", 40).chars().filter(i -> i == '.').count());
    }

    @Test
    public void FinalB() {
        Day18 d = new Day18();
        Assert.assertEquals(19993564, d.generateMap("^.^^^..^^...^.^..^^^^^.....^...^^^..^^^^.^^.^^^^^^^^.^^.^^^^...^^...^^^^.^.^..^^..^..^.^^.^.^.......", 400000).chars().filter(i -> i == '.').count());
    }
}
